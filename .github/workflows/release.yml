name: Build and Release start-cli

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release version (e.g., v0.4.0-alpha.9)'
        required: false
        type: string

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  UPSTREAM_REPO: aldum/start-os
  UPSTREAM_REF: next/edge

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.set.outputs.tag_name }}
      should_release: ${{ steps.set.outputs.should_release }}
    steps:
      - id: set
        name: Determine release parameters
        shell: bash
        run: |
          TAG=""
          SHOULD_RELEASE=false

          # Priority: workflow input > git tag > nothing
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.tag_name }}" ]]; then
            TAG="${{ inputs.tag_name }}"
            SHOULD_RELEASE=true
            echo "üì¶ Manual release triggered for: $TAG"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG="${{ github.ref_name }}"
            SHOULD_RELEASE=true
            echo "üè∑Ô∏è Tag push detected: $TAG"
          else
            echo "‚ö†Ô∏è No release will be created (no tag or manual input)"
          fi

          echo "tag_name=$TAG" >> "$GITHUB_OUTPUT"
          echo "should_release=$SHOULD_RELEASE" >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ matrix.container_tool }}-${{ matrix.target }}
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - target: x86_64-apple-darwin
          #   os: macos-13-large
          #   rust_target: x86_64-apple-darwin
          #   build_method: make
          # - target: aarch64-apple-darwin
          #   os: macos-13-xlarge
          #   rust_target: aarch64-apple-darwin
          #   build_method: make
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
            arch_env: x86_64
            rust_target: x86_64-unknown-linux-musl
            build_method: zigbuild
            container_tool: podman
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
            arch_env: x86_64
            rust_target: x86_64-unknown-linux-musl
            build_method: zigbuild
            container_tool: docker
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04-arm
            arch_env: aarch64
            rust_target: aarch64-unknown-linux-musl
            build_method: zigbuild
            container_tool: docker
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04-arm
            arch_env: aarch64
            rust_target: aarch64-unknown-linux-musl
            build_method: zigbuild
            container_tool: podman

    steps:
      - name: üì• Checkout start-os repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ env.UPSTREAM_REF }}
          fetch-depth: 0
          submodules: recursive
          path: start-os

      - name: üîç Show upstream commit
        run: |
          echo "Building from commit:"
          git -C start-os rev-parse HEAD
          echo ""
          echo "Submodules:"
          git -C start-os submodule status

      - name: üìù Generate GIT_HASH.txt (required by build)
        working-directory: start-os
        run: |
          git rev-parse HEAD > GIT_HASH.txt
          echo "GIT_HASH: $(cat GIT_HASH.txt)"

      - name: ü¶Ä Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: üíæ Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: start-os/core
          shared-key: ${{ matrix.rust_target }}
          cache-on-failure: true

      # macOS builds use standard cargo via Makefile
      - name: üçé Build start-cli (macOS)
        if: matrix.build_method == 'make'
        working-directory: start-os
        env:
          PLATFORM: ${{ startsWith(matrix.rust_target, 'aarch64') && 'aarch64' || 'x86_64' }}
        run: |
          echo "Building using Makefile (cargo install)..."
          make cli

      # Linux builds use zigbuild for proper musl linking
      - name: üîß Install Zig toolchain (Linux musl)
        if: matrix.build_method == 'zigbuild'
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.12.0

      - name: üîß Install cargo-zigbuild (Linux musl)
        if: matrix.build_method == 'zigbuild'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild

      - name: üêß Build start-cli (Linux musl)
        if: matrix.build_method == 'zigbuild'
        working-directory: start-os
        env:
          ENVIRONMENT: ${{ startsWith(matrix.container_tool, 'docker') && 'docker-' || '' }}registry
          CTOOL: ${{ startsWith(matrix.container_tool, 'podman') && 'podman' || '' }}
          ARCH: ${{ matrix.arch_env }}
          TARGET: ${{ matrix.rust_target }}
          ENFORCE_USE_DOCKER: "0"
        run: |
          echo "Building using cargo-zigbuild for static musl binary..."
          ./core/build-cli.sh

      - name: üì¶ Package and verify binary
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts

          # Find the built binary
          if [[ "${{ matrix.build_method }}" == "make" ]]; then
            BIN="$HOME/.cargo/bin/start-cli"
          else
            BIN="start-os/core/target/${{ matrix.rust_target }}/release/start-cli"
          fi

          if [[ ! -f "$BIN" ]]; then
            echo "‚ùå Binary not found at: $BIN"
            exit 1
          fi

          # Verify musl binaries are actually static
          if [[ "${{ matrix.rust_target }}" == *"musl"* ]]; then
            echo "üîç Verifying musl binary is statically linked..."
            LDD_OUTPUT=$(ldd "$BIN" 2>&1 || true)
            echo "ldd output: $LDD_OUTPUT"

            if [[ "$LDD_OUTPUT" == *"not a dynamic executable"* ]] || [[ "$LDD_OUTPUT" == *"statically linked"* ]]; then
              echo "‚úÖ Binary is statically linked (musl)"
            else
              echo "‚ö†Ô∏è WARNING: Binary appears to be dynamically linked!"
              echo "$LDD_OUTPUT"
            fi

            # Alternative check using file command
            echo "File command output:"
            file "$BIN"
          fi

          # Copy and strip binary
          OUT="artifacts/start-cli-${{ matrix.container_tool }}-${{ matrix.target }}"
          cp "$BIN" "$OUT"
          chmod +x "$OUT"

          echo "üìè Binary size before stripping: $(du -h "$OUT" | cut -f1)"
          (strip "$OUT" || llvm-strip "$OUT" || true) 2>/dev/null || true
          echo "üìè Binary size after stripping: $(du -h "$OUT" | cut -f1)"

          # Create archive
          pushd artifacts >/dev/null
          tar -czf "start-cli-${{ matrix.container_tool }}-${{ matrix.target }}.tar.gz" \
            "start-cli-${{ matrix.container_tool }}-${{ matrix.target }}"

          # Generate checksum
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "start-cli-${{ matrix.container_tool }}-${{ matrix.target }}.tar.gz" > \
              "start-cli-${{ matrix.container_tool }}-${{ matrix.target }}.tar.gz.sha256"
          else
            shasum -a 256 "start-cli-${{ matrix.container_tool }}-${{ matrix.target }}.tar.gz" > \
              "start-cli-${{ matrix.container_tool }}-${{ matrix.target }}.tar.gz.sha256"
          fi

          echo "üì¶ Archive created: start-cli-${{ matrix.container_tool }}-${{ matrix.target }}.tar.gz"
          popd >/dev/null

      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-binaries-${{ matrix.container_tool }}-${{ matrix.target }}
          path: artifacts/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.should_release == 'true'
    steps:
      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cli-binaries-*
          path: release-binaries
          merge-multiple: true

      - name: üîç Verify artifacts and create combined checksums
        working-directory: release-binaries
        run: |
          echo "üì¶ Downloaded binaries:"
          ls -lh *.tar.gz
          echo ""

          # Combine all checksums
          cat *.sha256 > sha256sums.txt

          echo "‚úÖ SHA256 checksums:"
          cat sha256sums.txt

      - name: üìù Generate release notes
        working-directory: release-binaries
        env:
          TAG_NAME: ${{ needs.prepare.outputs.tag_name }}
        run: |
          {
            echo "## Start CLI $TAG_NAME"
            echo ""
            echo "### üì¶ Installation"
            echo ""
            echo "Download the appropriate binary for your platform and extract:"
            echo '```sh'
            echo 'tar -xzf start-cli-<platform>.tar.gz'
            echo 'chmod +x start-cli-<platform>'
            echo 'sudo mv start-cli-<platform> /usr/local/bin/start-cli'
            echo '```'
            echo ""
            echo "### üîç Verify Download"
            echo ""
            echo "Compare the checksum with the values below:"
            echo '```sh'
            echo 'shasum -a 256 start-cli-<platform>.tar.gz'
            echo '```'
            echo ""
            echo "### ‚úÖ SHA256 Checksums"
            echo '```'
            cat sha256sums.txt
            echo '```'
            echo ""
            echo "### üìã Build Information"
            echo "- Built from: \`${{ env.UPSTREAM_REPO }}\` @ \`${{ env.UPSTREAM_REF }}\`"
            echo "- Linux binaries: Static musl builds (no glibc dependency)"
            # echo "- macOS binaries: Native builds for Intel and Apple Silicon"
          } > release-notes.txt

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-binaries/start-cli-*.tar.gz
            release-binaries/sha256sums.txt
          name: Start CLI ${{ needs.prepare.outputs.tag_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          body_path: release-binaries/release-notes.txt
          draft: false
          prerelease: ${{ contains(needs.prepare.outputs.tag_name, 'alpha') || contains(needs.prepare.outputs.tag_name, 'beta') }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
